generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PsikologJobs {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  PsikologAdditionalData PsikologAdditionalData[]

  @@index([name], name: "idx_name")
  @@map("psikolog_job")
}

model User {
  id         String    @id @default(uuid())
  name       String    @db.VarChar(50)
  type       String    @db.VarChar(20)
  isVerified Boolean   @default(false) @map("is_verified")
  photoUrl   String?   @map("photo_url") @db.VarChar(100)
  email      String    @unique @db.VarChar(50)
  noHp       String?   @map("no_hp") @db.VarChar(13)
  birthday   DateTime?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @map("updated_at")
  roleId     Int       @default(1)

  TreatmentSession       TreatmentSession[]
  Result                 Result[]
  PsikologAdditionalData PsikologAdditionalData?
  role                   Role                    @relation(fields: [roleId], references: [id])

  @@map("user")
}

// Role model
model Role {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(50)
  description String

  User User[]

  @@map("roles")
}

model PsikologAdditionalData {
  psikologId            String   @id @default(uuid()) @map("psychologist_id")
  nik                   String   @db.VarChar(50)
  certificateCredential String   @map("certificate_credential") @db.VarChar(20)
  isVerified            Boolean  @default(false) @map("is_verified")
  photoUrl              String?  @map("photo_url") @db.VarChar(100)
  email                 String   @unique @db.VarChar(50)
  class                 Int
  currentJobId          String?  @map("current_job_id")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @map("updated_at")

  Psikolog     User          @relation(fields: [psikologId], references: [id])
  PsikologJobs PsikologJobs? @relation(fields: [currentJobId], references: [id])

  @@map("psikolog_additional_data")
}

model Result {
  id               String   @id @default(uuid())
  psikologiToolsId String   @map("psikologi_tools_id")
  psikologId       String   @map("psikolog_id")
  name             String
  answers          String
  result           String
  editedResult     String?  @map("edited_result")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  PsikologiTools PsikologiTools @relation(fields: [psikologiToolsId], references: [id])
  Psikolog       User           @relation(fields: [psikologId], references: [id])

  @@map("result")
}

model PsikologiTools {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(50)
  path        String   @unique
  class       Int
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  Result Result[]

  @@map("psikologi_tools")
}

model TreatmentSession {
  id          String   @id @default(uuid())
  psikologId  String   @map("psikolog_id")
  clientId    String   @map("client_id")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@index([psikologId], name: "idx_psikolog_id")
  @@index([clientId], name: "idx_client_id")
  @@map("treatment_session")
}
